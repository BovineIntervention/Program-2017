package org.usfirst.frc.team686.robot;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

import edu.wpi.first.wpilibj.Servo;

/**
* GripPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class GripPipeline {

	//Outputs
	private Mat hslThresholdOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<String> tests = new ArrayList<String>();
	private ArrayList<MatOfPoint> output = new ArrayList<MatOfPoint>();
	
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(Mat source0) {
		// Step HSL_Threshold0:
		Mat hslThresholdInput = source0;
		double[] hslThresholdHue = {61.51079136690646, 83.24232081911262};
		double[] hslThresholdSaturation = {68.79496402877697, 255.0};
		double[] hslThresholdLuminance = {25.22482014388489, 231.0665529010239};
		hslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation, hslThresholdLuminance, hslThresholdOutput);

		// Step Find_Contours0:
		Mat findContoursInput = hslThresholdOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = 30.0;
		double filterContoursMinPerimeter = 0.0;
		double filterContoursMinWidth = 0.0;
		double filterContoursMaxWidth = 1000.0;
		double filterContoursMinHeight = 0.0;
		double filterContoursMaxHeight = 1000.0;
		double[] filterContoursSolidity = {0, 100};
		double filterContoursMaxVertices = 1000000.0;
		double filterContoursMinVertices = 0.0;
		double filterContoursMinRatio = 0.0;
		double filterContoursMaxRatio = 1000.0;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput, tests);
		
		compare(filterContoursOutput);
	}

	/**
	 * This method is a generated getter for the output of a HSL_Threshold.
	 * @return Mat output from HSL_Threshold.
	 */
	public Mat hslThresholdOutput() {
		return hslThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}

	public ArrayList<String> checkTest() {
		return tests;
	}
	
	public ArrayList<MatOfPoint> getDualBoxen() {
		return output;
	}
	/**
	 * Segment an image based on hue, saturation, and luminance ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param lum The min and max luminance
	 * @param output The image in which to store the output.
	 */
	private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum,
		Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
		Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]),
			new Scalar(hue[1], lum[1], sat[1]), out);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 * @param type The Transform.
	 * @param maskSize the size of the mask.
	 * @param output The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	/**
	 * Filters out contours that do not meet certain criteria.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param minWidth minimum width of a contour
	 * @param maxWidth maximum width
	 * @param minHeight minimum height
	 * @param maxHeight maximimum height
	 * @param Solidity the minimum and maximum solidity of a contour
	 * @param minVertexCount minimum vertex Count of the contours
	 * @param maxVertexCount maximum vertex Count
	 * @param minRatio minimum ratio of width to height
	 * @param maxRatio maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea,
		double minPerimeter, double minWidth, double maxWidth, double minHeight, double
		maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
		minRatio, double maxRatio, List<MatOfPoint> output, ArrayList<String> tests) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		tests.clear();
		tests.add(Integer.toString(inputContours.size()));
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth) {
				//tests.add("Width failed: " + bb.width);
				continue;
			}
			if (bb.height < minHeight || bb.height > maxHeight){
				//tests.add("Heigth failed: " + bb.height);
				continue;
			}
			final double area = Imgproc.contourArea(contour);
			if (area < minArea) {
				
				if(area != 0){
					//tests.add("Area failed: " + area);				
				}
				continue;
			}
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) {
				//tests.add("Perimeter failed");
				continue;
			}
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int)hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) {
				//tests.add("Solidity failed");
				continue;
			}
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	{
				//tests.add("Vertex count failed");
				continue;
			}
			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) {
				//tests.add("Ratio failed: " + ratio);
				continue;
			}
			output.add(contour);
			
		}
	}


public void compare(List<MatOfPoint> compare){
	output.clear();
	Rect r1 = new Rect();
	Rect r2 = new Rect();
	Rect temp = new Rect();
	double ratio = .4;
	int totalHeight = 1;
	
	for (int i = 0; i < compare.size() - 1; i++){
		for (int j = i; j < compare.size(); j++){
			r1 = Imgproc.boundingRect(compare.get(i));
			r2 = Imgproc.boundingRect(compare.get(j));
			
			if(r1.height < r2.height){
				temp = r1;
				r1 = r2;
				r2 = temp;
			}
			
			totalHeight = Math.abs(r1.y - (r2.y-r2.height));
			if(totalHeight != 0 ){
			if((r1.height)/totalHeight < (1.1*ratio) && ((r1.y-r1.height)/totalHeight > (.9*ratio))){
				if(((double) r1.x/ (double) r2.x) > .75 && ((double) r1.x/ (double) r2.x) < 1.25){
					//if((r1.width/r2.width) > .5 && (r1.width/r2.width) < 1.5){
					//System.out.println(r1.x/r2.x);
						output.add(compare.get(i));
						output.add(compare.get(j));
					//}
				 }
			   }
			}
		}
	}	
}

public void adjustCamera(double yPos, double angle, Servo cameraServo)
{
	//System.out.println(yPos);
    if(yPos > 250)
    {
        cameraServo.setAngle(angle-1);
    }
    	
    if(yPos < 230){
      	cameraServo.setAngle(angle+1);
    }
}

public double getDistance(Servo cameraServo)
{
	  double distance = 0;
	  double theta = Math.abs(3.3 - cameraServo.getAngle());
	  double Theight = (42.875) - 16.125;
	
	  distance = Theight/Math.tan(Math.PI*(theta)/180);
	
	    return distance;
}

}

